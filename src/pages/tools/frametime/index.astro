---
import BaseLayout from "@layouts/BaseLayout.astro";
---

<BaseLayout highlightedTab="Tools" pageTitle="Frametime Converter">
  <h1>Frametime converter</h1>
  <div class="tool">
    <div class="convert-cluster">
      <label for="toggle">
        <button id="toggleButton">Change to FPS</button>
      </label>
    </div>
    <div id="fpsContainer">
      <button class="fps-button">12</button>
      <button class="fps-button">24</button>
      <button class="fps-button">30</button>
      <button class="fps-button">60</button>
      <button class="fps-button">120</button>
      <button class="fps-button">144</button>
      <button class="fps-button">240</button>
      <button class="fps-button">480</button>
    </div>
    <div class="result-buttons">
      <button id="addLog">Save current result</button>
    </div>
    <div class="input">
      <input type="text" id="input" value="50" />
      <p id="equivalent"></p>
    </div>
    <div class="cluster">
      <input type="text" id="min" value="1" />
      <input type="range" id="slider" value="50" />
      <input type="text" id="max" value="240" />
    </div>
    <div class="comparison">
      <div class="fpsbox">
        <p id="fpsString">
          Comparisons will appear here once a result is saved!
        </p>
        <p id="fpsPercentage">{}</p>
      </div>
      <div class="msbox">
        <p id="msString">
          Comparisons will appear here once a result is saved!
        </p>
        <p id="msPercentage">{}</p>
      </div>
    </div>
    <div id="result"></div>
    <div id="log"></div>
  </div>
</BaseLayout>

<style>
  #fpsContainer {
    margin: 1rem;
    display: flex;
    justify-content: center;
  }
  .comparison {
    display: flex;
    flex-direction: column;
    min-height: 100px;
    gap: 0.2rem;
    width: 55%;
    margin: 0.2rem auto;
    padding: 0.2rem 0.2rem 0.2rem 0.2rem;
    background-color: gray;
    border-radius: 0.3rem;
  }

  .fpsbox,
  .msbox {
    background-color: white;
    border-radius: 0.2rem;
    min-height: 5em;
  }

  .fpsbox p,
  .msbox p {
    text-align: center;
    color: gray;
  }

  .convert-cluster {
    display: flex;
    justify-content: center;
  }

  .input {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.4rem;
  }

  .input p {
    margin-top: 0.4rem;
    line-height: 1;
  }

  #unitLabel {
    min-width: 3ch;
  }

  .cluster {
    width: 100%;
    display: flex;
    justify-content: center;
    gap: 0.4rem;
  }

  .tool input {
    font-family: var(--gabarito);
    border-radius: 0.2rem;
    border: 1px solid var(--color-light-border);
    text-align: center;
    background-color: var(--color-light-listing-bg);
    font-size: 1.1rem;
    width: 5ch;
  }

  #slider {
    width: 18ch;
  }

  html.dark .tool input {
    background-color: var(--color-night-listing-bg);
    border: -1px solid var(--color-night-border);
    color: var(--color-night-text);
  }

  .tool button {
    padding: 0.4rem 0.9rem;
    font-family: var(--gabarito);
    border-radius: 0.2rem;
    border: 1px solid var(--color-light-border);
    background-color: var(--color-light-listing-bg);
    transition: transform 0.1s var(--improved-ease);
  }

  .tool button:active {
    transform: scale(0.95);
  }

  .tool button:hover {
    background-color: var(--color-light-listing-hl);
  }

  html.dark .tool button {
    background-color: var(--color-night-listing-bg);
    border: -1px solid var(--color-night-border);
    color: var(--color-night-text);
  }
  html.dark .tool button:hover {
    background-color: var(--color-night-listing-hl);
  }

  html.dark .tool input:focus {
    outline: 1px solid var(--color-light-border);
  }

  .result-buttons {
    margin: 1rem auto;
    display: flex;
    justify-content: center;
  }

  .log {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .log p {
    text-align: center;
  }

  #toggleButton {
    min-width: 20ch;
  }

  .result-buttons button {
    margin: 0rem 0.5rem;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const LOG_LIMIT = 1;
    const prevValue = {
      frametime: 0,
      fps: 0,
    };

    const sliderLimits = {
      frametimeMin: 2,
      frametimeMax: 100,
      fpsMin: 12,
      fpsMax: 480,
    };

    let prevButton = 0;

    const fpsContainer = document.getElementById("fpsContainer");
    const toggleButton = document.getElementById(
      "toggleButton",
    ) as HTMLButtonElement;
    const input = document.getElementById("input") as HTMLInputElement;
    const msComp = document.getElementById("msString") as HTMLParagraphElement;
    const fpsComp = document.getElementById(
      "fpsString",
    ) as HTMLParagraphElement;
    const unit = document.getElementById("unitLabel") as HTMLInputElement;
    const min = document.getElementById("min") as HTMLInputElement;
    const max = document.getElementById("max") as HTMLInputElement;
    const slider = document.getElementById("slider") as HTMLInputElement;
    const saveButton = document.getElementById("addLog") as HTMLInputElement;
    const log = document.getElementById("log") as HTMLDivElement;
    const equiv = document.getElementById("equivalent") as HTMLParagraphElement;
    const fpsPercent = document.getElementById(
      "fpsPercentage",
    ) as HTMLParagraphElement;
    const msPercent = document.getElementById(
      "msPercentage",
    ) as HTMLParagraphElement;
    let isFrametime = true;

    fpsContainer.addEventListener("click", (event: Event) => {
      const targetButton = (event.target as Element).closest(
        ".fps-button",
      ) as HTMLButtonElement;

      if (targetButton) {
        const buttonText = targetButton.textContent;
        let inputValue = parseInt(buttonText);
        updateInputValue(inputValue);
      }
    });

    function updateInputValue(value: number): void {
      if (isFrametime) {
        toggleUnits();
      }
      input.value = value.toString();
      slider.value = value.toString();
      if (prevButton !== value) {
        updateResult();
      }
      if (log.children.length === 0) {
        addToLog();
        // updateSliderAttributes();
      }
      prevButton = value;
    }

    min.addEventListener("input", () => {
      if (isFrametime) {
        sliderLimits.frametimeMin = parseFloat(min.value);
      } else {
        sliderLimits.fpsMin = parseFloat(min.value);
      }
      updateSliderAttributes();
    });

    max.addEventListener("input", () => {
      if (isFrametime) {
        sliderLimits.frametimeMax = parseFloat(max.value);
      } else {
        sliderLimits.fpsMax = parseFloat(max.value);
      }
      updateSliderAttributes();
    });

    function updateSliderAttributes(): void {
      const newValue = parseFloat(input.value) || parseFloat(slider.value);
      const convertedValue = convert(newValue);
      slider.min = isFrametime
        ? sliderLimits.frametimeMin.toString()
        : sliderLimits.fpsMin.toString();
      slider.max = isFrametime
        ? sliderLimits.frametimeMax.toString()
        : sliderLimits.fpsMax.toString();
      min.value = isFrametime
        ? sliderLimits.frametimeMin.toString()
        : sliderLimits.fpsMin.toString();
      max.value = isFrametime
        ? sliderLimits.frametimeMax.toString()
        : sliderLimits.fpsMax.toString();
      if (isFrametime) {
        sliderLimits.frametimeMin = Math.min(
          sliderLimits.frametimeMin,
          sliderLimits.frametimeMin,
          convertedValue,
        );
        sliderLimits.frametimeMax = Math.max(
          sliderLimits.frametimeMax,
          convertedValue,
        );
      } else {
        sliderLimits.fpsMin = Math.floor(
          Math.min(sliderLimits.fpsMin, convertedValue),
        );
        sliderLimits.fpsMax = Math.ceil(
          Math.max(sliderLimits.fpsMax, convertedValue),
        );
      }
      slider.value = convertedValue.toFixed(0).toString();
      input.value = convertedValue.toFixed(0).toString();
    }

    function updateButtonText(): void {
      toggleButton.textContent = isFrametime
        ? "Switch to FPS"
        : "Switch to Frametime";
      unit.textContent = isFrametime ? "ms" : "FPS";
    }

    // function printvalues(): void {
    //   console.log(`fps: ${prevValue.fps}`);
    //   console.log(`frametime: ${prevValue.frametime}`);
    // }

    function addToLog(): void {
      const value = parseFloat(input.value) || parseFloat(slider.value);
      const convertedValue = convert(value);
      const newChild = document.createElement("p");
      newChild.style.textAlign = "center";
      newChild.textContent = isFrametime
        ? `${value.toFixed(0)}ms = ${convertedValue.toFixed(2)}FPS`
        : `${value.toFixed(0)}FPS = ${convertedValue.toFixed(2)}ms`;
      if (isFrametime) {
        prevValue.frametime = value;
        prevValue.fps = convertedValue;
      } else {
        prevValue.fps = value;
        prevValue.frametime = convertedValue;
      }
      if (log.children.length >= LOG_LIMIT) {
        log.lastChild.remove();
      }
      log.prepend(newChild);
      updateResult();
    }
    saveButton.addEventListener("click", () => {
      addToLog();
    });

    function convert(value: number): number {
      return isFrametime ? 1000 / value : 1000 / value;
    }

    function updateResult(): void {
      const value = parseFloat(input.value) || parseFloat(slider.value);
      const convertedValue = convert(value);
      let fpsPercentage: number;
      let msPercentage: number;
      let msDifference: number;
      let fpsDifference: number;
      let fpsSign: string;
      let msSign: string;
      if (prevValue.fps !== 0) {
        if (isFrametime) {
          fpsDifference = convertedValue - prevValue.fps;
          msDifference = value - prevValue.frametime;

          msPercentage =
            ((value - prevValue.frametime) / prevValue.frametime) * 100;
          fpsPercentage =
            ((convertedValue - prevValue.fps) / prevValue.fps) * 100;
        } else {
          fpsDifference = value - prevValue.fps;
          msDifference = convertedValue - prevValue.frametime;

          fpsPercentage = ((value - prevValue.fps) / prevValue.fps) * 100;
          msPercentage =
            ((convertedValue - prevValue.frametime) / prevValue.frametime) *
            100;
        }
        fpsSign = fpsDifference < 0 ? "" : "+";
        msSign = msDifference < 0 ? "" : "+";

        fpsPercent.textContent = ` ${fpsSign}${fpsPercentage.toFixed(2)}%`;
        fpsComp.textContent = `${fpsSign}${fpsDifference.toFixed(2)}FPS`;
        msComp.textContent = `${msSign}${msDifference.toFixed(2)}ms`;
        msPercent.textContent = ` ${msSign}${msPercentage.toFixed(2)}%`;
        fpsComp.style.textAlign =
          fpsPercent.style.textAlign =
          msComp.style.textAlign =
          msPercent.style.textAlign =
            "center";
        fpsComp.style.color = fpsPercent.style.color =
          fpsDifference < 0 ? "red" : "green";
        msComp.style.color = msPercent.style.color =
          msDifference < 0 ? "green" : "red";
        if (msDifference === 0) {
          msComp.style.color = msPercent.style.color = "black";
          fpsComp.style.color = fpsPercent.style.color = "black";
        }
      }
      equiv.textContent = isFrametime
        ? `ms = ${convertedValue.toFixed(2)} FPS`
        : `FPS = ${convertedValue.toFixed(2)}ms`;
    }
    input.addEventListener("input", updateResult);

    toggleButton.addEventListener("click", () => {
      toggleUnits();
    });

    function toggleUnits() {
      isFrametime = !isFrametime;
      updateSliderAttributes();
      updateResult();
      updateButtonText();
    }

    slider.addEventListener("input", () => {
      input.value = parseInt(slider.value).toFixed(0).toString();
      updateResult();
    });

    updateSliderAttributes();
    updateResult();
  });
</script>
