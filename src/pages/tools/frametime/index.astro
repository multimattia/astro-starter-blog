---
import BaseLayout from "@layouts/BaseLayout.astro";
---

<BaseLayout highlightedTab="Tools" pageTitle="Frametime Converter">
  <h1>Frametime converter</h1>
  <div class="tool">
    <div class="convert-cluster">
      <label for="toggle">
        <button id="toggleButton">Change to FPS</button>
      </label>
    </div>
    <div class="input">
      <input type="text" id="input" value="50" />
      <p id="unitLabel">ms</p>
    </div>
    <div class="cluster">
      <input type="text" id="min" value="1" />
      <input type="range" id="slider" value="50" />
      <input type="text" id="max" value="240" />
    </div>
    <div class="result-buttons">
      <button id="addLog">Save result</button>
    </div>
    <div id="result"></div>
    <div id="log"></div>
  </div>
</BaseLayout>

<style>
  .convert-cluster {
    display: flex;
    justify-content: center;
  }

  .input {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.4rem;
  }

  .input p {
    margin-top: 0.4rem;
    line-height: 1;
  }

  #unitLabel {
    min-width: 3ch;
  }

  .cluster {
    width: 100%;
    display: flex;
    justify-content: center;
    gap: 0.4rem;
  }

  .tool input {
    border-radius: 0.2rem;
    border: 1px solid var(--color-light-border);
    text-align: center;
    background-color: var(--color-light-listing-bg);
    font-size: 1.1rem;
    width: 5ch;
  }

  #slider {
    width: 11ch;
  }

  html.dark .tool input {
    background-color: var(--color-night-listing-bg);
    border: -1px solid var(--color-night-border);
    color: var(--color-night-text);
  }

  .tool button {
    padding: 0.4rem 0.9rem;
    border-radius: 0.2rem;
    border: 1px solid var(--color-light-border);
    background-color: var(--color-light-listing-bg);
    transition: transform 0.1s var(--improved-ease);
  }

  .tool button:active {
    transform: scale(0.95);
  }

  .tool button:hover {
    background-color: var(--color-light-listing-hl);
  }

  html.dark .tool button {
    background-color: var(--color-night-listing-bg);
    border: -1px solid var(--color-night-border);
    color: var(--color-night-text);
  }
  html.dark .tool button:hover {
    background-color: var(--color-night-listing-hl);
  }

  html.dark .tool input:focus {
    outline: 1px solid var(--color-light-border);
  }

  .result-buttons {
    margin: 1rem auto;
    display: flex;
    justify-content: center;
  }

  .log {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .log p {
    text-align: center;
  }

  #toggleButton {
    min-width: 20ch;
  }

  .result-buttons button {
    margin: 0rem 0.5rem;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const LOG_LIMIT = 5;

    const sliderLimits = {
      frametimeMin: 20,
      frametimeMax: 100,
      fpsMin: 1,
      fpsMax: 240,
    };

    const toggleButton = document.getElementById(
      "toggleButton"
    ) as HTMLButtonElement;
    const input = document.getElementById("input") as HTMLInputElement;
    const unit = document.getElementById("unitLabel") as HTMLInputElement;
    const min = document.getElementById("min") as HTMLInputElement;
    const max = document.getElementById("max") as HTMLInputElement;
    const slider = document.getElementById("slider") as HTMLInputElement;
    const saveButton = document.getElementById("addLog") as HTMLInputElement;
    const result = document.getElementById("result") as HTMLDivElement;
    const log = document.getElementById("log") as HTMLDivElement;
    let isFrametime = true;

    min.addEventListener("input", (event) => {
      if (isFrametime) {
        sliderLimits.frametimeMin = parseFloat(min.value);
      } else {
        sliderLimits.fpsMin = parseFloat(min.value);
      }
      updateSliderAttributes();
    });

    max.addEventListener("input", (event) => {
      if (isFrametime) {
        sliderLimits.frametimeMax = parseFloat(max.value);
      } else {
        sliderLimits.fpsMax = parseFloat(max.value);
      }
      updateSliderAttributes();
    });

    function updateSliderAttributes(): void {
      const newValue = parseFloat(input.value) || parseFloat(slider.value);
      const convertedValue = convert(newValue);
      slider.min = isFrametime
        ? sliderLimits.frametimeMin.toString()
        : sliderLimits.fpsMin.toString();
      slider.max = isFrametime
        ? sliderLimits.frametimeMax.toString()
        : sliderLimits.fpsMax.toString();
      min.value = isFrametime
        ? Math.floor(sliderLimits.frametimeMin).toString()
        : Math.floor(sliderLimits.fpsMin).toString();
      max.value = isFrametime
        ? Math.ceil(sliderLimits.frametimeMax).toString()
        : Math.ceil(sliderLimits.fpsMax).toString();
      if (isFrametime) {
        sliderLimits.frametimeMin = Math.min(
          sliderLimits.frametimeMin,
          sliderLimits.frametimeMin,
          convertedValue
        );
        sliderLimits.frametimeMax = Math.max(
          sliderLimits.frametimeMax,
          convertedValue
        );
      } else {
        sliderLimits.fpsMin = Math.floor(
          Math.min(sliderLimits.fpsMin, convertedValue)
        );
        sliderLimits.fpsMax = Math.ceil(
          Math.max(sliderLimits.fpsMax, convertedValue)
        );
      }
      slider.value = convertedValue.toFixed(0).toString();
      input.value = convertedValue.toFixed(0).toString();
    }

    function updateButtonText(): void {
      toggleButton.textContent = isFrametime
        ? "Switch to FPS"
        : "Switch to Frametime";
      unit.textContent = isFrametime ? "ms" : "FPS";
    }

    function addToLog(): void {
      const value = parseFloat(input.value) || parseFloat(slider.value);
      const convertedValue = convert(value);
      const newChild = document.createElement("p");
      newChild.style.textAlign = "center";
      newChild.textContent = isFrametime
        ? `${value.toFixed(0)}ms = ${convertedValue.toFixed(0)}FPS`
        : `${value.toFixed(0)}FPS = ${convertedValue.toFixed(2)}ms`;
      if (log.children.length >= LOG_LIMIT) {
        log.lastChild.remove();
      }
      log.prepend(newChild);
    }
    saveButton.addEventListener("click", () => {
      addToLog();
    });

    function convert(value: number): number {
      return isFrametime ? 1000 / value : 1000 / value;
    }

    function updateResult(): void {
      const value = parseFloat(input.value) || parseFloat(slider.value);
      const convertedValue = convert(value);
      result.textContent = isFrametime
        ? `${value.toFixed(0)}ms = ${convertedValue.toFixed(1)}FPS`
        : `${value.toFixed(0)}FPS = ${convertedValue.toFixed(2)}ms`;
      result.style.textAlign = "center";
      result.style.setProperty("font-family", "var(--lexend-bold)");
    }
    input.addEventListener("input", updateResult);

    toggleButton.addEventListener("click", () => {
      isFrametime = !isFrametime;
      updateSliderAttributes();
      updateResult();
      updateButtonText();
    });

    slider.addEventListener("input", () => {
      input.value = parseInt(slider.value).toFixed(0).toString();
      updateResult();
    });

    updateSliderAttributes();
    updateResult();
  });
</script>
